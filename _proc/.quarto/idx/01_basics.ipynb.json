{"title":"Basic objects","markdown":{"yaml":{"description":"Basic object types and methods utilized in `pybx`","output-file":"basics.html","title":"Basic objects"},"headingText":"[`get_bx`](https://thatgeeman.github.io/pybx/basics.html#get_bx)","containsRefs":false,"markdown":"\n\n\n\n<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->\n\nAnchor box coordinates of type `list`/`dict`/`json`/`array` can be converted \nto a [`Bx`](https://thatgeeman.github.io/pybx/basics.html#bx) instance. Once wrapped as a [`Bx`](https://thatgeeman.github.io/pybx/basics.html#bx) instance, some interesting properties can\nbe calculated from the coordinates. \n\nInitializing an empty [`Bx`](https://thatgeeman.github.io/pybx/basics.html#bx) class. It does a whole lot of things!\n\nGenerate random coordinates for one anchor boxes.\n\nIf a single list is passed, [`Bx`](https://thatgeeman.github.io/pybx/basics.html#bx) will make it a list of list.\n\nSo the correct way to do it would be to pass a list of list.\n\nTo get normalized coordinates wrt to the image dimensions.\n\n[`Bx`](https://thatgeeman.github.io/pybx/basics.html#bx) is inherited by all other types in `pybx`: [`BaseBx`](https://thatgeeman.github.io/pybx/basics.html#basebx), [`MultiBx`](https://thatgeeman.github.io/pybx/basics.html#multibx), `ListBx`, `JsonBx`, exposing the same properties.\n\n[`BaseBx`](https://thatgeeman.github.io/pybx/basics.html#basebx) works with other types of coordinates too. \nIt accepts the coordinates and label for one anchor box in a `list` or `ndarray` \nformat.\n\nWorks with arrays and lists:\n\nCalling the `values` attribute returns the labels along with the coordinates.\n\n[`BaseBx`](https://thatgeeman.github.io/pybx/basics.html#basebx) also exposes a method to calculate the Intersection Over Union (IOU):\n\n[`BaseBx`](https://thatgeeman.github.io/pybx/basics.html#basebx) is also pseudo-iterable (calling an iterator returns `self` itself and not the coordinates or labels).\n\nWorking with multiple bounding boxes and annotaions is usually done with the help\nof [`MultiBx`](https://thatgeeman.github.io/pybx/basics.html#multibx). [`MultiBx`](https://thatgeeman.github.io/pybx/basics.html#multibx) allows iteration.\n\nGenerate random coordinates:\n\nAll annotations are stored as a [`BaseBx`](https://thatgeeman.github.io/pybx/basics.html#basebx) in a container called [`MultiBx`](https://thatgeeman.github.io/pybx/basics.html#multibx)\n\nEach index reveals the stored coordinate as a [`BaseBx`](https://thatgeeman.github.io/pybx/basics.html#basebx)\n\nThey can also be iterated:\n\nOr using list comprehension, properties of individual boxes can be extracted\n\nExtending [`BaseBx`](https://thatgeeman.github.io/pybx/basics.html#basebx) to also accept (`json`, `dict`) formatted coordinates and labels.\n\nAlso accepts keys (for the dict) as a list, otherwise uses `voc_keys`.\n\nMaking [`MultiBx`](https://thatgeeman.github.io/pybx/basics.html#multibx) work with lists with more than 4 items. It is a common practice\nto have the class label along with the coordinates. This classmethod is useful in such \nsituations\n\nInserting classmethod to process lists and dicts in [`MultiBx`](https://thatgeeman.github.io/pybx/basics.html#multibx).\n\nHow the class method works:\n\nChecking if it works with ndarrays\n\nAllowing [`BaseBx`](https://thatgeeman.github.io/pybx/basics.html#basebx) to process a single `dict` and `list` directly.\n\nRemember that [`BaseBx`](https://thatgeeman.github.io/pybx/basics.html#basebx) can only have one box coordinate and label at a time.\n\nWhat does [`make_single_iterable`](https://thatgeeman.github.io/pybx/ops.html#make_single_iterable) do? It converts a single list or dict of \ncoordinates into an iterable list that can be used by [`BaseBx`](https://thatgeeman.github.io/pybx/basics.html#basebx).\n\nThe class method makes it easier to directly call [`BaseBx`](https://thatgeeman.github.io/pybx/basics.html#basebx) without making the coordinates a list of list.\n\n\nWhen in doubt, use [`get_bx`](https://thatgeeman.github.io/pybx/basics.html#get_bx).\n\n[`get_bx`](https://thatgeeman.github.io/pybx/basics.html#get_bx) runs a bunch of if-else statements to call the right module when in doubt.\n\nEnabling stacking of different boxes.\n\nInternally this is what is done to stack them:\n\nAdding a [`MultiBx`](https://thatgeeman.github.io/pybx/basics.html#multibx) to a [`BaseBx`](https://thatgeeman.github.io/pybx/basics.html#basebx) makes the new set of coordinates a [`MultiBx`](https://thatgeeman.github.io/pybx/basics.html#multibx), so a [`BxViolation`](https://thatgeeman.github.io/pybx/excepts.html#bxviolation) warning is issued\nif this was not intended. \n\nTo avoid the [`BxViolation`](https://thatgeeman.github.io/pybx/excepts.html#bxviolation), use the method [`stack_bxs`](https://thatgeeman.github.io/pybx/basics.html#stack_bxs).\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"basics.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.184","theme":"cosmo","description":"Basic object types and methods utilized in `pybx`","title":"Basic objects"},"extensions":{"book":{"multiFile":true}}}}}